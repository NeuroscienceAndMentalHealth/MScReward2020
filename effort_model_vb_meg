---
title: "EFFORT_MODELLING"
author: "Megan Croal"
date: "07/05/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Rstan modelling
```{r}

library (bayesplot)
library (rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)

library(tidyr)
require(knitr)
library(tidyverse)
library(dplR)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(R.matlab)
library(hrbrthemes)
library(RColorBrewer)

#slategrey3 I, lightskyblue E, skyblue2 R
#B48EAD #EBCB8B #A3BE8C


```


```{r}
#load the data into a list
rstan_data<-list(Ni=Ni,Ns=Ns,Nx=Nx,x_eff=x_eff,x_rwd=x_rwd,y=y)

#Load the model into an object
model1r <- stan_model(file = 'effortmodels/model_1/model_1.stan', verbose = TRUE)

model2r <- stan_model(file = 'effortmodels/model_2/model_2.stan', verbose = TRUE)

model3r <- stan_model(file = 'effortmodels/model_3/model_3.stan', verbose = TRUE)

model4r <- stan_model(file = 'effortmodels/model_4/model_4.stan', verbose = TRUE)

model5r <- stan_model(file = 'effortmodels/model_5/model_5.stan', verbose = TRUE)
```

FIT VB MODELS
```{r}
#Fit model 1

fit_vbmodel1r<- vb(model1r,
                data    = rstan_data,
                seed    = 001) 


#fit model 2
fit_vbmodel2r<- vb(model2r,
                data    = rstan_data,
                seed    = 002) 


#fit model 3
fit_vbmodel3r<- vb(model3r,
                data    = rstan_data,
                seed    = 003) 

#fit model 4
fit_vbmodel4r<- vb(model4r,
                data    = rstan_data,
                seed    = 004)

#fit model 5
fit_vbmodel5r<- vb(model5r,
                data    = rstan_data,
                seed    = 005)


#look at the model output
#print(fit_vbmodel1r) 
#print(fit_vbmodel2r)
#print(fit_vbmodel3r)

#save objects
save.image(file = "fit_vbmodel1r.RData")
save.image(file = "fit_vbmodel2r.RData")
save.image(file = "fit_vbmodel3r.RData")
save.image(file = "fit_vbmodel4r.RData")
save.image(file = "fit_vbmodel5r.RData")
# load("Gamble_MCMC_model4.RData")

```

LOO
```{r}
#Elpd means expected log probability density of the loo 
#P_loo is the number of parameters
#Looic is what we are interested in (information criteria), this is the number that we report. 
#The lower the number, the better the model is.

library(loo)
LL1 <- extract_log_lik(fit_vbmodel1r)
loo1 <- loo(LL1)
waic1 <- waic(LL1)

LL2 <- extract_log_lik(fit_vbmodel2r)
loo2 <- loo(LL2)
waic2 <- waic(LL2)

LL3 <- extract_log_lik(fit_vbmodel3r)
loo3 <- loo(LL3)
waic3 <- waic(LL3)

LL4 <- extract_log_lik(fit_vbmodel4r)
loo4 <- loo(LL4)
waic4 <- waic(LL4)

LL5 <- extract_log_lik(fit_vbmodel5r)
loo5 <- loo(LL5)
waic5 <- waic(LL5)

loo_compare(loo1, loo2)
loo_compare(loo2, loo3)
loo_compare(loo3, loo4)
loo_compare(loo4, loo5)
loo_compare(loo2, loo5)
loo_compare(loo2, loo4)

```


MODEL COMPARISON LOOIC PLOT
```{r}
#Plot model comparison results as a bar chart (or at least as a table)
#using vb for all models 

looic_values <- rbind(loo1$looic, loo2$looic, loo3$looic, loo4$looic, loo5$looic) 

looic_se <- rbind(loo1$se_looic, loo2$se_looic, loo3$se_looic, loo4$se_looic, loo5$se_looic) 

looic_against_winning <- rbind(loo1$looic-loo2$looic, loo2$looic-loo2$looic, loo3$looic-loo2$looic, loo4$looic-loo2$looic, loo5$looic-loo2$looic) 

looic_values <- cbind(looic_values, looic_se, looic_against_winning)

looic_values <- as.data.frame(looic_values)


colnames(looic_values)[2] <- "se_looic"
colnames(looic_values)[1] <- "looic"
colnames(looic_values)[3] <- "looic_minus_winning"


#row.names(looic_values) <- c("model1", "model2", "model3", "model4", "model5")

looic_values$model <- c("model1", "model2", "model3", "model4", "model5")


ggplot(looic_values) +
  geom_bar(aes(x=model, y=looic),stat="identity",
                             colour = "black",  #black outside lines
                             size   = 0.3,     
                             width = 0.6, fill="slategray3") +  
  labs(title="LOOIC Comparison Effort") + 
  theme(plot.title = element_text(hjust = 0.5)) + #centre the title
  geom_errorbar(aes(x=model, ymin=looic-se_looic, ymax=looic+se_looic), size = 0.6, width=0.3, colour="black", alpha=0.9, position=position_dodge(.9))


#plot looic values against winning model
ggplot(looic_values) +
  geom_bar(aes(x=model, y=looic_against_winning),stat="identity",
                             colour = "black",  #black outside lines
                             size   = 0.3,     
                             width = 0.6, fill="slategray3") +  
  labs(title="LOOIC Comparison Against Winning Model Effort") + 
  theme(plot.title = element_text(hjust = 0.5)) #centre the title

```


INDIVIDUAL PARAMETER PLOTS
```{r}
#if you have 500 participants you should have an array of Thetas[500,1000] so you have 1000 sample per participant
#where the row is the parameter for a single participant
#so parameter ThetaI[362,:] should return the samples for participant 362
#if you do a histogram of that, you should see the distribution of the parameter ThetaI for that participant

posterior_model2 <- as.array(fit_vbmodel2r)

mcmc_intervals(posterior_model2, 
               pars = c("thetaI[1]","thetaR[1]", "thetaE[1]"))


#if you want to return the individual subject parameters use:

posterior_model1 <- as.matrix(fit_vbmodel1r)
posterior_model1df <- as.data.frame(posterior_model1)

posterior_model2 <- as.matrix(fit_vbmodel2r)
posterior_model2df <- as.data.frame(posterior_model2)

posterior_model3 <- as.matrix(fit_vbmodel3r)
posterior_model3df <- as.data.frame(posterior_model3)

posterior_model4 <- as.matrix(fit_vbmodel4r)
posterior_model4df <- as.data.frame(posterior_model4)

posterior_model5 <- as.matrix(fit_vbmodel5r)
posterior_model5df <- as.data.frame(posterior_model5)


mcmc_intervals(posterior_model2,
               regex_pars = c("thetaR"))

mcmc_intervals(posterior_model2,
               regex_pars = c("thetaI", "thetaR", "thetaE"))


mcmc_intervals(posterior_model2,
               pars = vars(param_range("thetaR", c(1:547))))


#regex means it’ll perform a regular expression match to the name thetaR and select any parameters that contains ‘thetaR’

#the blue things you see are the distribution of the parameter:
#light blue band is the 95% distribution interval (similar to confidence intervals)
#dark blue band is the 50% distribution interval
#the little star must be the mean of the distribution


```


PLOT GROUP LEVEL DISTRIBUTIONS
```{r}
#Extract the group-level distribution for the winning model and plot them (mus, and sigmas)

#model 1
stan_plot(fit_vbmodel1r, pars=c('muR', 'muE', 'muI', 'sdI', 'sdE', 'sdR'), show_density=T, fill_color = 'slategray1')


#model 2
stan_plot(fit_vbmodel2r, pars=c('muR', 'muE', 'muI', 'sdI', 'sdE', 'sdR'), show_density=T, fill_color = 'slategray3') 


#model 3
stan_plot(fit_vbmodel3r, pars=c('muR', 'muE', 'muE2', 'sdE2', 'muI', 'sdI', 'sdE', 'sdR'), show_density=T, fill_color = 'slategray1')

#model 4
stan_plot(fit_vbmodel4r, pars=c('muR', 'muE', 'muI', 'sdI', 'sdE', 'sdR'), show_density=T, fill_color = 'slategray1')

#model 5
stan_plot(fit_vbmodel5r, pars=c('muR', 'muE', 'muE2', 'sdE2', 'muI', 'sdI', 'sdE', 'sdR'), show_density=T, fill_color = 'slategray1')


```






